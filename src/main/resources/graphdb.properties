# ===== BLUEPRINTS GRAPH =====
# graph directory corresponding to the implementation defined in {blueprints.graph}
# this is redundant to {blueprints.neo4j.directory} but needed in case another graph than Neo4j is used
graph.directory = /var/dbpedia-graphdb/dbs/neo4j

# boolean flag to determine if an index for the edges should be created/used
# this increases the graph directory size by almost 100% 
# only useful if {de.unima.dws.dbpediagraph.subgraph.edgeFilter} is used
graph.edge.index = false

# ----- Blueprints Graph Config -----
# the graph implementation 
# default is Neo4j, other implementations available at https://github.com/tinkerpop/blueprints/wiki
blueprints.graph = com.tinkerpop.blueprints.impls.neo4j.Neo4jGraph
# Neo4j graph directory
blueprints.neo4j.directory = /var/dbpedia-graphdb/dbs/neo4j
# Neo4j config
blueprints.neo4j.conf.dump_configuration = true


# ===== DBPEDIA GRAPH =====
# ----- Graph Loading Settings (de.unima.dws.dbpediagraph.loader) -----
# Statement loading filters:
# each filter is a predicate that decides for each triple in the imported datasets if it is valid or not
# can be multiple of ALL, BLACKLIST, COMPLETE, DOMAIN, RESOURCE, NON_CATEGORY, REGEXP_CATEGORY, ONTOLOGY_THRESHOLD, NON_ONTOLOGY
loading.filter.impl = DOMAIN, BLACKLIST, REGEXP_CATEGORY, ONTOLOGY_THRESHOLD
# Blacklist Filter stop URIs; corresponding class is de.unima.dws.dbpediagraph.loader.BlacklistTriplePredicate 
# If blacklist is activated in {loading.filter.impl}, all triples with subjects or objects contained in one of the files are invalid
# See file content for more information
loading.filter.blacklist.files = DBPediaStopUris_DeriHulpus2013_Extended.txt, DBPediaStopUris_Preds.txt, DBPediaStopUris_Custom.txt
# File that contains the frequency counts of ontology classes
# Used by ONTOLOGY_THRESHOLD filter
loading.filter.ontology.occurrences.file = /ontology-occ-counts.txt
# Threshold for frequency counts of ontology classes; all classes that occur less often than the threshold are valid
# Used by ONTOLOGY_THRESHOLD filter
loading.filter.ontology.threshold = 100000

# ----- Edge Weight Settings (de.unima.dws.dbpediagraph.weights) -----
# predicate, object, and predicate-object combination frequencies in the graph
# used by the edge weights algorithms
# when loading a graph, the counting is performed after loading and frequencies are stored in the configured file
graph.occ.counts.file = /var/dbpedia-graphdb/weights/map.bin
# edge weight implementation; can be one DUMMY (no-op implementation), JOINT_IC, COMB_IC, IC_PMI
graph.edge.weights.impl = DUMMY


# ===== SUBGRAPH CONSTRUCTION =====
# ----- Graph Traversal -----
# Traversal Direction: can be one of DIRECTED_GRAPH, UNDIRECTED_GRAPH
# undirected has higher accuracy but is computationally more expensive
de.unima.dws.dbpediagraph.graph.graphType = UNDIRECTED_GRAPH
# Traversal Depth: max distance to explore when constructing subgraph 
# for undirected 2 is a good setting; for directed [3,5]
de.unima.dws.dbpediagraph.subgraph.maxDistance = 2
# Traversal Edge Filter: dynamically decide if an edge should be explored or not
# this makes the traversal super slow; therefore it is better to use appropriate {loading.filter.impl} settings when
# loading the graph and not use the no-op setting here, which is ALL
# can be multiple of ALL, NON_ONTOLOGY, NON_CATEGORY
de.unima.dws.dbpediagraph.subgraph.edgeFilter = ALL

# Boolean flag if the resulting subgraph should be written to a file in GraphML format
de.unima.dws.dbpediagraph.subgraph.persistSubgraph = false
# The directory to where to write the subgraph files
de.unima.dws.dbpediagraph.subgraph.persistSubgraphDirectory = /var/dbpedia-graphdb/subgraphs

# ----- Candidate Pruning -----
# Filters for candidate entities of a surface form 
# Filter all entities below a minimum support (by prior usually works better)
# org.dbpedia.spotlight.graphdb.filter.minSupport = 10
# Filter best-k entities by prior probability 
# In experiments best-7 by prior worked best
org.dbpedia.spotlight.graphdb.filter.maxCandidatesByPrior = 7


# ===== DISAMBIGUATION =====
# disambiguator algorithm implementations, needs to be one of the classes in de.unima.dws.dbpediagraph.disambiguate.local.*
de.unima.dws.dbpediagraph.graph.disambiguator = de.unima.dws.dbpediagraph.disambiguate.local.DegreeCentrality
# PriorStrategy Implementation that decides when and how to use prior probabilities of entities.
# see javadoc of enum values in de.unima.dws.dbpediagraph.disambiguate.PriorStrategy.java
# can be one of NO_ANNOTATION, SINGLETON_FALLBACK, CONFIDENCE_FALLBACK
de.unima.dws.dbpediagraph.disambiguate.priorstrategy = NO_ANNOTATION
# threshold value for when to apply the prior strategy; used by the PriorStrategy implementations
de.unima.dws.dbpediagraph.disambiguate.priorstrategy.threshold = 0.0 
